# Use an official CUDA base image
FROM nvidia/cuda:11.3.1-base-ubuntu20.04

# Install prerequisites
RUN apt-get update && apt-get install -y \
    python3-pip \
    curl \
    wget \
    bzip2 \
    git \
    && rm -rf /var/lib/apt/lists/*

# Install Miniconda (you can choose a specific version if you want)
RUN curl -Lo miniconda.sh https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh \
    && chmod +x miniconda.sh \
    && ./miniconda.sh -b -p /opt/conda \
    && rm miniconda.sh

# Add Miniconda to PATH
ENV PATH /opt/conda/bin:$PATH

RUN export TORCH_CUDA_ARCH_LIST="6.0 6.1 6.2 7.0 7.2 7.5 8.0 8.6"

# Copy your environment.yml file
COPY environment_thaumato.yml /workspace/

# Create Conda environment from the file
RUN conda create --name "thaumato" python=3.10.9 pip=23.1 -y

# Set the Conda environment path
ENV CONDA_DEFAULT_ENV thaumato
ENV PATH /opt/conda/envs/$CONDA_DEFAULT_ENV/bin:$PATH

# Install cython and pyyaml first
RUN pip install "cython<3.0.0" pyyaml==5.4.1 --no-build-isolation -v

# Update the environment using the yml file
RUN conda env update --name thaumato -f /workspace/environment_thaumato.yml

# Install cuda toolkit
# RUN conda install -c "nvidia/label/cuda-11.3.1" cuda-toolkit

# Copy mask3d third party for installation
COPY ./ThaumatoAnakalyptor/mask3d/third_party/ /workspace/ThaumatoAnakalyptor/mask3d/third_party/

# Install the Python packages
RUN pip install torch==1.12.1+cu113 torchvision==0.13.1+cu113 --extra-index-url https://download.pytorch.org/whl/cu113 \
    && pip install torch-scatter -f https://data.pyg.org/whl/torch-1.12.1+cu113.html \
    && pip install 'git+https://github.com/facebookresearch/detectron2.git@710e7795d0eeadf9def0e7ef957eea13532e34cf' --no-deps 

RUN git clone --recursive "https://github.com/NVIDIA/MinkowskiEngine" /workspace/ThaumatoAnakalyptor/mask3d/third_party/MinkowskiEngine \
    && cd /workspace/ThaumatoAnakalyptor/mask3d/third_party/MinkowskiEngine && git checkout 02fc608bea4c0549b0a7b00ca1bf15dee4a0b228

RUN export TORCH_CUDA_ARCH_LIST="6.0 6.1 6.2 7.0 7.2 7.5 8.0 8.6" \
    && cd /workspace/ThaumatoAnakalyptor/mask3d/third_party/MinkowskiEngine \
    && python setup.py install --force_cuda --blas=openblas
    
RUN export TORCH_CUDA_ARCH_LIST="6.0 6.1 6.2 7.0 7.2 7.5 8.0 8.6" \
    && git clone https://github.com/ScanNet/ScanNet.git /workspace/ThaumatoAnakalyptor/mask3d/third_party/ScanNet \
    && cd /workspace/ThaumatoAnakalyptor/mask3d/third_party/ScanNet/Segmentator && git checkout 3e5726500896748521a6ceb81271b0f5b2c0e7d2 \
    && make \
    && cd /workspace/ThaumatoAnakalyptor/mask3d/third_party/pointnet2 && python setup.py install
    
RUN pip install pytorch-lightning==1.7.2 \
    && pip install torchmetrics==0.11.4

RUN apt-get update && apt-get install -y libgl1-mesa-glx

ENV DEBIAN_FRONTEND=noninteractive

# Install apt sources for Volume Cartographer
# RUN echo 'deb http://deb.debian.org/debian bookworm-backports main' > /etc/apt/sources.list.d/backports.list \
# && apt-get clean && apt-get -y update
RUN apt-get install --fix-missing --fix-broken -y \
    build-essential \
    curl \
    git \
    libbz2-dev \
    libexpat1-dev \
    libfontconfig1-dev \
    libfreetype6-dev \
    libgl1-mesa-dev \
    libglu1-mesa-dev \
    libicu-dev \
    libncurses-dev \
    libopenblas-dev \
    libusb-1.0-0-dev \
    '^libxcb.*-dev' \
    libx11-dev \
    libx11-xcb-dev \
    libxcb-glx0-dev \
    libxcb-keysyms1-dev \
    libxcb-image0-dev \
    libxcb-shm0-dev \
    libxcb-icccm4-dev \
    libxcb-sync-dev \
    libxcb-xfixes0-dev \
    libxcb-shape0-dev \
    libxcb-randr0-dev \
    libxcb-render-util0-dev \
    libxcb-util-dev \
    libxcb-xinerama0-dev \
    libxcb-xkb-dev \
    libxext-dev \
    libxfixes-dev \
    libxi-dev \
    libxkbcommon-dev \
    libxkbcommon-x11-dev \
    libxrender-dev \
    libxt-dev \
    ninja-build \
    perl \
    pkg-config \
    python3-dev \
    python3-pip \
    python3-setuptools \
    zlib1g-dev 

RUN apt-get update \
  && apt-get -y install build-essential \
  && apt-get install -y wget \
  && rm -rf /var/lib/apt/lists/* \
  && wget https://github.com/Kitware/CMake/releases/download/v3.24.1/cmake-3.24.1-Linux-x86_64.sh \
      -q -O /tmp/cmake-install.sh \
      && chmod u+x /tmp/cmake-install.sh \
      && mkdir /opt/cmake-3.24.1 \
      && /tmp/cmake-install.sh --skip-license --prefix=/opt/cmake-3.24.1 \
      && rm /tmp/cmake-install.sh \
      && ln -s /opt/cmake-3.24.1/bin/* /usr/local/bin

# This fix: libGL error: No matching fbConfigs or visuals found
ENV LIBGL_ALWAYS_INDIRECT=1

# Install Python 3, PyQt5
RUN apt-get update && apt-get install -y python3-pyqt5

# Set the XDG_RUNTIME_DIR environment variable for the 'qtuser'
ENV XDG_RUNTIME_DIR=/workspace

RUN cd /

RUN git clone --recursive https://github.com/educelab/volume-cartographer

# working directory root
WORKDIR volume-cartographer/


# print the current working directory
RUN pwd
# print the contents of the current working directory
RUN ls -la

# Install vc-deps (dynamic)
RUN cd /volume-cartographer/vc-deps/ \
&& mkdir -p build \
&& cd build/ \
&& ls \
&& cmake -GNinja -DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Release -DVCDEPS_BUILD_ZLIB=OFF -DCMAKE_INSTALL_PREFIX=/usr .. \
&& ninja \
&& cd / \
&& rm -rf /volume-cartographer/vc-deps/

WORKDIR /

# # Install Qt6
# RUN curl -O -L https://download.qt.io/archive/qt/6.6/6.6.1/single/qt-everywhere-src-6.6.1.tar.xz 
# RUN tar -xf qt-everywhere-src-6.6.1.tar.xz 

# RUN cd / && cd qt-everywhere-src-6.6.1/ \
# && ./configure -opensource -nomake examples -nomake tests -bundled-xcb-xinput -confirm-license \
# && cmake --build . --parallel \
# && cmake --install . \
# && cd ../ \
# && rm -rf qt-*

# RUN export CMAKE_PREFIX_PATH="/usr/local/Qt-6.6.1/" 
RUN cmake  \
      -S /volume-cartographer/ \
      -B /volume-cartographer/build/ \
      -GNinja  \
      -DCMAKE_BUILD_TYPE=Release  \
      -DCMAKE_INSTALL_RPATH=/usr/local/Qt-6.6.1/lib \
      -DVC_BUILD_ACVD=ON  \
      -DVC_BUILD_GUI=OFF  \
    && cmake --build /volume-cartographer/build/ \
    && cmake --install /volume-cartographer/build/ 

# Add user for GUI
RUN adduser --quiet --disabled-password qtuser && usermod -a -G audio qtuser

# Copy scripts and modules
COPY ./ThaumatoAnakalyptor/mask3d/ /workspace/ThaumatoAnakalyptor/mask3d/

# Set the user to 'qtuser'
USER qtuser

# Set working directory
WORKDIR /workspace/

# Optional: Default script to run. Remove this line if you want to run scripts manually
# CMD ["python", "your_default_script.py"]
